FROM nvcr.io/nvidia/tensorflow:23.04-tf2-py3

LABEL maintainer="FinSight Dev Team"
LABEL description="MCTX with T4 GPU optimizations and HANA integration"
LABEL version="1.0"

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    libblas-dev \
    liblapack-dev \
    pkg-config \
    libhdf5-dev \
    libhdf5-serial-dev \
    openssh-client \
    wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for MCTX
COPY requirements/requirements.txt requirements/requirements.txt
COPY requirements/requirements_examples.txt requirements/requirements_examples.txt

# Install core dependencies
RUN pip install --no-cache-dir -U pip setuptools wheel && \
    pip install --no-cache-dir -r requirements/requirements.txt

# Install visualization and monitoring dependencies
RUN pip install --no-cache-dir \
    plotly==5.18.0 \
    dash==2.14.0 \
    dash-bootstrap-components==1.5.0 \
    ipywidgets==8.1.1 \
    psutil==5.9.6 \
    pynvml==11.5.0 \
    matplotlib==3.8.0 \
    pandas==2.1.1

# Install SAP HANA dependencies
RUN pip install --no-cache-dir \
    hdbcli==2.19.21 \
    sqlalchemy==2.0.23 \
    sqlalchemy-hana==0.5.1 \
    hana-ml==2.17.23102000

# Install JAX with CUDA support
RUN pip install --no-cache-dir \
    jax[cuda11_pip]==0.4.16 \
    jaxlib==0.4.16 \
    --find-links https://storage.googleapis.com/jax-releases/jax_cuda_releases.html

# Copy MCTX source code
COPY . /app/

# Ensure README files are explicitly copied
COPY README.md /app/README.md
COPY NVIDIA_LAUNCHPAD.md /app/NVIDIA_LAUNCHPAD.md
COPY docker/README.md /app/docker_README.md
COPY docs/docker/README.md /app/docker_deployment_guide.md

# Create symlinks for easy access
RUN ln -sf /app/README.md /README.md && \
    ln -sf /app/NVIDIA_LAUNCHPAD.md /NVIDIA_LAUNCHPAD.md

# Install MCTX in development mode
RUN pip install -e .

# Set paths for CUDA, cuDNN, and NVIDIA libraries
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64
ENV PATH=$PATH:/usr/local/cuda/bin

# Set up the entrypoint
COPY docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Expose ports for visualization server and API
EXPOSE 8050 8000

# Entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Default command - run the monitoring demo
CMD ["python", "examples/monitoring_demo.py", "--save-visualizations"]