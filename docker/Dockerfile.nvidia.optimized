# Stage 1: Build stage with development dependencies
FROM nvcr.io/nvidia/tensorflow:23.04-tf2-py3 AS builder

LABEL stage=builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Working directory
WORKDIR /build

# Install build-time system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    libblas-dev \
    liblapack-dev \
    pkg-config \
    libhdf5-dev \
    libhdf5-serial-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy only requirements files first for better caching
COPY requirements/requirements.txt requirements/requirements.txt
COPY requirements/requirements_examples.txt requirements/requirements_examples.txt

# Install core dependencies
RUN pip install --no-cache-dir -U pip setuptools wheel && \
    pip install --no-cache-dir -r requirements/requirements.txt

# Install JAX with CUDA support
RUN pip install --no-cache-dir \
    jax[cuda11_pip]==0.4.16 \
    jaxlib==0.4.16 \
    --find-links https://storage.googleapis.com/jax-releases/jax_cuda_releases.html

# Copy necessary source files
COPY mctx/ /build/mctx/
COPY api/ /build/api/
COPY setup.py pyproject.toml MANIFEST.in LICENSE README.md /build/

# Install the package in development mode
RUN pip install -e .

# Stage 2: Runtime image
FROM nvcr.io/nvidia/tensorflow:23.04-tf2-py3 AS runtime

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    JAX_PLATFORM_NAME=gpu \
    MCTX_ENABLE_T4_OPTIMIZATIONS=1 \
    XLA_PYTHON_CLIENT_ALLOCATOR=platform \
    LOG_LEVEL=INFO

# Working directory
WORKDIR /app

# Install runtime system dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libhdf5-103 \
    openssh-client \
    wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy installed packages from builder
COPY --from=builder /usr/local/lib/python3.8/dist-packages /usr/local/lib/python3.8/dist-packages

# Copy application files
COPY --from=builder /build/mctx /app/mctx
COPY --from=builder /build/api /app/api
COPY --from=builder /build/setup.py /app/
COPY --from=builder /build/pyproject.toml /app/

# Copy examples directory
COPY examples/ /app/examples/
COPY mctx_output/ /app/mctx_output/

# Copy documentation files
COPY README.md NVIDIA_LAUNCHPAD.md /app/
COPY docker/README.md /app/docker_README.md
COPY docs/docker/README.md /app/docker_deployment_guide.md

# Create symlinks for easy access
RUN ln -sf /app/README.md /README.md && \
    ln -sf /app/NVIDIA_LAUNCHPAD.md /NVIDIA_LAUNCHPAD.md

# Set paths for CUDA, cuDNN, and NVIDIA libraries
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64
ENV PATH=$PATH:/usr/local/cuda/bin

# Copy and setup entrypoint script
COPY docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Expose ports for visualization server and API
EXPOSE 8050 8000

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8050/ || curl -f http://localhost:8000/health || exit 1

# Entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Default command - run the monitoring demo
CMD ["python", "examples/monitoring_demo.py", "--save-visualizations"]