version: '3.8'

# MCTX Cloud Deployment Configuration
# Optimized for Vercel, AWS, and GCP deployment

services:
  # Vercel-compatible API service
  api:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.vercel
    image: mctx-api:latest
    container_name: mctx-api
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    environment:
      - JAX_PLATFORM_NAME=cpu
      - PORT=${PORT:-3000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_BATCH_SIZE=${MAX_BATCH_SIZE:-8}
      - MAX_NUM_SIMULATIONS=${MAX_NUM_SIMULATIONS:-50}
      - NODE_ENV=${NODE_ENV:-production}
      - ENABLE_CACHE=${ENABLE_CACHE:-true}
      - CACHE_TTL=${CACHE_TTL:-3600}
    command: ["api", "${PORT:-3000}"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3000}/info"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  
  # Caching layer
  redis:
    image: redis:7.0-alpine
    container_name: mctx-cache
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Visualization server (optional - can be disabled in production)
  visualization:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.vercel
    image: mctx-api:latest
    container_name: mctx-vis
    ports:
      - "${VIS_PORT:-8050}:8050"
    environment:
      - JAX_PLATFORM_NAME=cpu
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    command: ["visualize"]
    restart: unless-stopped
    profiles: ["development", "monitoring"]
    
  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: mctx-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ../../config/prometheus/cloud.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    profiles: ["monitoring"]
    
  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:9.5.2
    container_name: mctx-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../config/grafana/provisioning:/etc/grafana/provisioning
      - ../../config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus
    profiles: ["monitoring"]

volumes:
  redis_data:
    name: mctx_cloud_redis_data
  prometheus_data:
    name: mctx_cloud_prometheus_data
  grafana_data:
    name: mctx_cloud_grafana_data