version: '3.8'

# MCTX Production GPU Docker Compose Configuration
# Enterprise-grade NVIDIA GPU setup with caching, monitoring, and scalability

services:
  # MCTX API with NVIDIA GPU support
  mctx-api:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.nvidia
    image: mctx-api:latest
    container_name: mctx-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ../../models:/app/models
      - ../../logs:/app/logs
      - mctx-data:/app/data
    environment:
      - TZ=UTC
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
      - JAX_PLATFORM_NAME=gpu
      - MCTX_ENABLE_T4_OPTIMIZATIONS=${ENABLE_T4_OPTIMIZATIONS:-1}
      - MCTX_NUM_WORKERS=${MCTX_NUM_WORKERS:-4}
      - MCTX_MAX_BATCH_SIZE=${MCTX_MAX_BATCH_SIZE:-32}
      - MCTX_DEFAULT_SIMULATIONS=${MCTX_DEFAULT_SIMULATIONS:-128}
      - MCTX_TIMEOUT_SECONDS=${MCTX_TIMEOUT_SECONDS:-60}
      - MCTX_GPU_MEMORY_FRACTION=${MCTX_GPU_MEMORY_FRACTION:-0.9}
      - MCTX_USE_MIXED_PRECISION=${MCTX_USE_MIXED_PRECISION:-true}
      - MCTX_ENABLE_DISTRIBUTED=${MCTX_ENABLE_DISTRIBUTED:-false}
      - MCTX_NUM_DEVICES=${MCTX_NUM_DEVICES:-1}
      - MCTX_ENABLE_REDIS_CACHE=${MCTX_ENABLE_REDIS_CACHE:-true}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CACHE_TTL=${REDIS_CACHE_TTL:-3600}
      - MCTX_ENABLE_PROMETHEUS=${MCTX_ENABLE_PROMETHEUS:-true}
      - MCTX_API_KEY_REQUIRED=${MCTX_API_KEY_REQUIRED:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Visualization server
  mctx-vis:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.nvidia
    image: mctx-api:latest
    container_name: mctx-vis
    restart: unless-stopped
    ports:
      - "${VIS_PORT:-8050}:8050"
    volumes:
      - ../../examples:/app/examples
      - ../../mctx_output:/app/mctx_output
    environment:
      - JAX_PLATFORM_NAME=cpu
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    command: ["visualize"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis for caching
  redis:
    image: redis:7.0-alpine
    container_name: mctx-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: mctx-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ../../config/prometheus/production.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - mctx-api

  # Grafana for visualization and dashboards
  grafana:
    image: grafana/grafana:9.5.2
    container_name: mctx-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ../../config/grafana/provisioning:/etc/grafana/provisioning
      - ../../config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: mctx-redis-exporter
    restart: unless-stopped
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis

  # Optional: SAP HANA client container
  # Uncomment and configure as needed
  # hana-client:
  #   image: saplabs/hanacloudclient:latest
  #   container_name: mctx-hana-client
  #   restart: unless-stopped
  #   environment:
  #     - HANA_HOST=${HANA_HOST}
  #     - HANA_PORT=${HANA_PORT}
  #     - HANA_USER=${HANA_USER}
  #     - HANA_PASSWORD=${HANA_PASSWORD}
  #     - HANA_USE_SSL=true
  #   depends_on:
  #     - mctx-api

volumes:
  mctx-data:
    name: mctx-data
  redis-data:
    name: mctx-redis-data
  prometheus-data:
    name: mctx-prometheus-data
  grafana-data:
    name: mctx-grafana-data

networks:
  default:
    name: mctx-network